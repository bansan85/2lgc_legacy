Programmation
Pour les nombres flottants, il faut utiliser double. Entre autre parce que cxsparse utilise des types double et principalement car la précision est plus importante.

tous les defines doivent être en majuscule :
#define BUG free((int*)1)

Toutes les noms de définitions de structure doivent avoir la première lettre en majuscule. Le nom des propriétés est en minuscule
typedef struct __Projet
{
	Actions		actions
} Projet;





Règles de rédaction de l'arborescence ci-dessous :
	- la description d'éléments de type dossier doit commencer par : dossier contenant

La source possède l'arborescence suivante :
	- AUTHORS : contient la liste des auteurs du projet.
	- ChangeLog : Le ChangeLog
	- clean_config : supprimer tous les fichiers créés par les autotools et les différents make
	- COPYING : la licence
	- diff-configure.scan.patch : les modifications à apporter au configure.scan après le lancement de la commande autoscan. Met à jours également le numéro de version
	- doc : dossier contenant de la documentation diverse
	- files : dossier contenant les fichiers de configuration du programme développé
	- INSTALL : liste des instructions pour compiler et installer l'application
	- Makefile.am : pour autotools
	- NEWS : les news
	- po : dossier contenant les fichiers de traduction. Bien que cela semble superflu pour l'instant car l'application est rédigé en français, il est nécessaire de maintenir le fichier fr.po.
		- La procédure de mise à jour des traductions et de création de nouvelles est rédigée dans le fichier INSTALL contenu dans la racine du projet
	- README : readme
	- src : dossier contenant les sources du programme
		- calc : dossier contenant les programmes de calculs
		- gui : dossier contenant les programmes gérant l'interface graphique et appelant les programmes de calculs
		- lib : dossier contenant les librairies de calcul (une librairies par norme !!).
			- sample : dossier pouvant servir de base viège pour créer une nouvelle norme
				Un compromis, à la discrétion des développeurs, doit être trouvé entre un fichier regroupant toutes les formules et un fichier par formule.
			



Si make check échoue, la ligne où le programme plante peut être obtenu par gdb.
Par exemple, pour le programme test : src/test/1990__1 il y a deux possibilités :
	- Soit le fichier est un exécutable et alors un simple "gdb src/test/1990__1" "run" "bt full" détecte l'emplacement exact du problème
	- Soit le fichier est un script shell, il faut alors lancer src/test/.libs/1990__1. Il sera alors indiqué qu'il manque une librairie.
		Pour chaque librairie manquante, il faudra compléter la variable shell :
			export LD_LIBRARY_PATH=src/lib/1990/.libs/:src/lib/common/.libs/
		Ensuite, "gdb src/test/.libs/1990__1" "run" "bt full" détecte l'emplacement exact du problème ou valgrind



Interface graphique :
paramètre pour définir une action :
	- nature (permanente, précontrainte, exploitation, accidentelle, sismique)
	- catégorie
	- action structurelle ou géotechnique ?
	- variable dominante ou d'accompagnement ?
	- stocker les valeurs : %y~0~, %y~1~, %y~2~
	- coefficient de sécurité sur les actions : %g~F~
	- coefficient majorateur dynamique : %j
	- Pourcentage d'écart possible de la valeur caractéristique (sup et inf).
	- Charge disponible à l'ELU et/ou ELS et/ou ELA
